# actionlint: allow secrets.REPO_ADMIN_TOKEN
name: Enforce Branch Protection

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - .github/workflows/enforce-branch-protection.yml
      - infra/branch-protection/**

permissions:
  contents: read

jobs:
  apply:
    name: Apply branch protection rules
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Load branch protection configuration
        id: config
        run: |
          CONFIG_PATH="infra/branch-protection/main.json"

          if [ ! -f "$CONFIG_PATH" ]; then
            echo "::error::Branch protection config not found at $CONFIG_PATH" >&2
            exit 1
          fi

          if ! command -v jq >/dev/null 2>&1; then
            echo "::error::jq is required but not installed" >&2
            exit 1
          fi

          BRANCH=$(jq -r '.branch // ""' "$CONFIG_PATH")
          if [ -z "$BRANCH" ] || [ "$BRANCH" = "null" ]; then
            echo "::error::Missing branch name in configuration" >&2
            exit 1
          fi

          PAYLOAD_FILE="$RUNNER_TEMP/branch-protection.json"
          jq 'del(.branch)' "$CONFIG_PATH" > "$PAYLOAD_FILE"

          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "payload_file=$PAYLOAD_FILE" >> "$GITHUB_OUTPUT"

      - name: Enforce branch protection
        uses: actions/github-script@v8
        env:
          TARGET_BRANCH: ${{ steps.config.outputs.branch }}
          PAYLOAD_FILE: ${{ steps.config.outputs.payload_file }}
        with:
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            const branch = process.env.TARGET_BRANCH;
            const payloadPath = process.env.PAYLOAD_FILE;

            if (!branch) {
              core.setFailed('Branch name missing from configuration output');
              process.exit(1);
            }

            if (!payloadPath) {
              core.setFailed('Payload file path missing from configuration output');
              process.exit(1);
            }

            let payload;
            try {
              payload = JSON.parse(fs.readFileSync(payloadPath, 'utf8'));
            } catch (error) {
              core.setFailed(`Unable to read branch protection payload: ${error.message}`);
              process.exit(1);
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            await github.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection', {
              owner,
              repo,
              branch,
              ...payload,
            });

            core.info(`âœ… Applied branch protection to ${owner}/${repo}@${branch}`);
