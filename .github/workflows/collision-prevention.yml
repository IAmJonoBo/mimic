name: Comprehensive Collision Prevention & Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.4'

jobs:
  module-boundaries:
    name: Module Boundary Enforcement
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint module boundary checks
        run: pnpm nx run-many -t lint --parallel --maxParallel=4

      - name: Validate token namespace compliance
        run: |
          echo "üîç Checking CSS token namespace compliance (Specify Warning Prevention)..."
          # Ensure all CSS tokens use --ds-* prefix to prevent Tailwind conflicts
          if grep -r "^[[:space:]]*--[^d][^s]-" packages/design-tokens/libs/tokens/css/ 2>/dev/null; then
            echo "‚ùå Found CSS tokens without ds- prefix (Specify conflict risk)"
            echo "Solution: All CSS custom properties must use --ds-* prefix per Specify documentation"
            exit 1
          fi
          echo "‚úÖ All CSS tokens use --ds-* prefix (Specify compliant)"

          echo "üîç Checking JavaScript token namespace compliance..."
          # Ensure all JS tokens use ds prefix (exclude comments and strings)
          if grep -r "^[[:space:]]*export.*[^d][^s][A-Z]" packages/design-tokens/libs/tokens/js/ 2>/dev/null; then
            echo "‚ùå Found JS tokens without ds prefix"
            exit 1
          fi
          echo "‚úÖ All JS tokens use ds prefix"

      - name: Run comprehensive collision prevention validation
        run: |
          echo "üîç Running comprehensive collision prevention validation..."
          cd packages/shared-utils

          # Build the collision prevention module
          pnpm build

          # Run the runtime collision prevention check
          node dist/collision-prevention.js

          echo "‚úÖ Collision prevention validation completed"

      - name: Validate Storybook port assignments (Supernova Compliance)
        run: |
          echo "üîç Checking Storybook port assignments (Supernova Docs Compliance)..."

          # Check for required Storybook configs and their ports
          configs=("main.ts:6006" "main.mobile.ts:7007" "main.desktop.ts:6008")
          for config_port in "${configs[@]}"; do
            IFS=':' read -r config expected_port <<< "$config_port"
            config_file="packages/design-system/.storybook/$config"

            if [ ! -f "$config_file" ]; then
              echo "‚ùå Missing Storybook config: $config"
              exit 1
            fi

            if ! grep -q "config.server.port = $expected_port" "$config_file"; then
              echo "‚ùå $config: Port not set to $expected_port (Supernova requirement)"
              exit 1
            fi
          done
          echo "‚úÖ All Storybook ports correctly assigned per Supernova docs"

      - name: Validate package scoping (Locofy FAQ Compliance)
        run: |
          echo "üîç Checking package scoping (Locofy FAQ Compliance)..."

          # Check that all packages use @mimic scope
          for package_file in packages/*/package.json; do
            if [ -f "$package_file" ]; then
              package_name=$(jq -r '.name' "$package_file")
              if [[ ! "$package_name" =~ ^@mimic/ ]]; then
                echo "‚ùå Package in $package_file uses unscoped name: $package_name"
                echo "Solution: Use @mimic/ scope per Locofy FAQ (prevents Metro duplication)"
                exit 1
              fi
            fi
          done
          echo "‚úÖ All packages use @mimic scope (Locofy FAQ compliant)"

      - name: Validate import path compliance
        run: |
          echo "üîç Checking for deprecated dist/ import paths..."
          # Ensure no imports use deprecated dist/ paths
          if grep -r "from.*design-tokens.*dist/" apps/ packages/ 2>/dev/null; then
            echo "‚ùå Found deprecated dist/ import paths"
            echo "Please update to use libs/tokens/ paths instead"
            exit 1
          fi
          if grep -r "import.*design-tokens.*dist/" apps/ packages/ 2>/dev/null; then
            echo "‚ùå Found deprecated dist/ import paths"
            echo "Please update to use libs/tokens/ paths instead"
            exit 1
          fi
          echo "‚úÖ No deprecated dist/ import paths found"

      - name: Check collision-safe token outputs
        run: |
          echo "üîç Verifying collision-safe token outputs exist..."

          # Check platform-rooted directories exist
          for platform in css scss js ts json dart compose react-native; do
            if [ ! -d "packages/design-tokens/libs/tokens/$platform" ]; then
              echo "‚ùå Missing platform directory: libs/tokens/$platform"
              exit 1
            fi
          done
          echo "‚úÖ All platform-rooted directories exist"

          # Verify ds- prefixed outputs
          if [ -f "packages/design-tokens/libs/tokens/css/tokens.css" ]; then
            if ! grep -q "^--ds-" packages/design-tokens/libs/tokens/css/tokens.css; then
              echo "‚ùå CSS tokens don't use --ds- prefix"
              exit 1
            fi
          fi
          echo "‚úÖ Token outputs are collision-safe"

  token-pipeline:
    name: Token Pipeline Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build design tokens
        run: pnpm nx run design-tokens:tokens:build

      - name: Validate token schema compliance
        run: |
          echo "üîç Validating token schema compliance..."

          # Check for token schema violations
          cd packages/design-tokens

          # Validate JSON schema
          if [ -f "libs/tokens/json/tokens.json" ]; then
            # Basic JSON validation
            node -e "JSON.parse(require('fs').readFileSync('libs/tokens/json/tokens.json', 'utf8'))"
            echo "‚úÖ JSON tokens are valid"
          fi

          # Check for required token categories
          required_categories=("color" "typography" "spacing" "shadow")
          for category in "${required_categories[@]}"; do
            if ! grep -q "\"$category\"" libs/tokens/json/tokens.json 2>/dev/null; then
              echo "‚ö†Ô∏è  Warning: $category tokens not found"
            fi
          done

      - name: Test token collision detection
        run: |
          echo "üîç Testing runtime collision detection..."
          cd packages/shared-utils

          # Run collision detection tests
          pnpm test --testNamePattern="runtime.*guard" --passWithNoTests

      - name: Validate cross-platform consistency
        run: |
          echo "üîç Validating cross-platform token consistency..."

          # Compare token counts across platforms
          css_count=$(grep -c "^--ds-" packages/design-tokens/libs/tokens/css/tokens.css 2>/dev/null || echo "0")
          js_count=$(grep -c "^export.*ds" packages/design-tokens/libs/tokens/js/tokens.js 2>/dev/null || echo "0")

          echo "CSS tokens: $css_count"
          echo "JS tokens: $js_count"

          # Allow for some variation due to platform-specific tokens
          if [ "$css_count" -gt 0 ] && [ "$js_count" -gt 0 ]; then
            echo "‚úÖ Tokens generated for multiple platforms"
          else
            echo "‚ö†Ô∏è  Warning: Low token count detected"
          fi

  storybook-composition:
    name: Storybook Composition Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build design tokens
        run: pnpm nx run design-tokens:tokens:build

      - name: Test Storybook web build
        run: |
          echo "üîç Testing Storybook web build..."
          cd packages/design-system
          timeout 120 pnpm build-storybook || echo "Storybook build completed or timed out"

      - name: Validate Storybook composition configs
        run: |
          echo "üîç Validating Storybook composition configurations..."

          # Check for required Storybook configs
          configs=("main.ts" "main.mobile.ts" "main.desktop.ts")
          for config in "${configs[@]}"; do
            if [ ! -f "packages/design-system/.storybook/$config" ]; then
              echo "‚ùå Missing Storybook config: $config"
              exit 1
            fi
          done
          echo "‚úÖ All Storybook composition configs present"

          # Check for isolated Vite configs
          vite_configs=("vite.config.storybook.ts" "vite.config.mobile.ts" "vite.config.desktop.ts")
          for config in "${vite_configs[@]}"; do
            if [ ! -f "packages/design-system/.storybook/$config" ]; then
              echo "‚ùå Missing Vite config: $config"
              exit 1
            fi
          done
          echo "‚úÖ All Vite isolation configs present"

      - name: Test Storybook port isolation (Supernova Compliance)
        run: |
          echo "üîç Testing Storybook port isolation (Supernova Docs)..."

          # Test that each Storybook config specifies its required port
          web_port=$(grep -o "config.server.port = [0-9]*" packages/design-system/.storybook/main.ts | grep -o "[0-9]*")
          mobile_port=$(grep -o "config.server.port = [0-9]*" packages/design-system/.storybook/main.mobile.ts | grep -o "[0-9]*")
          desktop_port=$(grep -o "config.server.port = [0-9]*" packages/design-system/.storybook/main.desktop.ts | grep -o "[0-9]*")

          if [ "$web_port" != "6006" ]; then
            echo "‚ùå Web Storybook port should be 6006, found: $web_port"
            exit 1
          fi

          if [ "$mobile_port" != "7007" ]; then
            echo "‚ùå Mobile Storybook port should be 7007, found: $mobile_port"
            exit 1
          fi

          if [ "$desktop_port" != "6008" ]; then
            echo "‚ùå Desktop Storybook port should be 6008, found: $desktop_port"
            exit 1
          fi

          echo "‚úÖ All Storybook ports correctly isolated per Supernova docs"
          echo "   - Web: $web_port"
          echo "   - Mobile: $mobile_port"
          echo "   - Desktop: $desktop_port"

  security-scan:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for sensitive data leaks
        run: |
          echo "üîç Checking for sensitive data in token files..."

          # Check for API keys, secrets, or personal info in tokens
          if grep -r -i "api[_-]key\|secret\|password\|token.*[0-9a-f]\{20,\}" packages/design-tokens/libs/tokens/ 2>/dev/null; then
            echo "‚ùå Potential sensitive data found in tokens"
            exit 1
          fi
          echo "‚úÖ No sensitive data detected in tokens"

      - name: Validate token file permissions
        run: |
          echo "üîç Checking token file permissions..."

          # Ensure token files are not executable
          if find packages/design-tokens/libs/tokens/ -type f -executable 2>/dev/null | grep -q .; then
            echo "‚ùå Found executable token files"
            exit 1
          fi
          echo "‚úÖ Token file permissions are secure"

  performance-budget:
    name: Performance Budget Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build design tokens
        run: pnpm nx run design-tokens:tokens:build

      - name: Check token bundle sizes
        run: |
          echo "üîç Checking token bundle sizes..."

          # Define size limits (in bytes)
          CSS_LIMIT=51200    # 50KB
          JS_LIMIT=25600     # 25KB
          JSON_LIMIT=102400  # 100KB

          # Check CSS bundle size
          if [ -f "packages/design-tokens/libs/tokens/css/tokens.css" ]; then
            css_size=$(wc -c < packages/design-tokens/libs/tokens/css/tokens.css)
            echo "CSS bundle size: ${css_size} bytes (limit: ${CSS_LIMIT})"
            if [ "$css_size" -gt "$CSS_LIMIT" ]; then
              echo "‚ùå CSS bundle exceeds size limit"
              exit 1
            fi
          fi

          # Check JS bundle size
          if [ -f "packages/design-tokens/libs/tokens/js/tokens.js" ]; then
            js_size=$(wc -c < packages/design-tokens/libs/tokens/js/tokens.js)
            echo "JS bundle size: ${js_size} bytes (limit: ${JS_LIMIT})"
            if [ "$js_size" -gt "$JS_LIMIT" ]; then
              echo "‚ùå JS bundle exceeds size limit"
              exit 1
            fi
          fi

          # Check JSON bundle size
          if [ -f "packages/design-tokens/libs/tokens/json/tokens.json" ]; then
            json_size=$(wc -c < packages/design-tokens/libs/tokens/json/tokens.json)
            echo "JSON bundle size: ${json_size} bytes (limit: ${JSON_LIMIT})"
            if [ "$json_size" -gt "$JSON_LIMIT" ]; then
              echo "‚ùå JSON bundle exceeds size limit"
              exit 1
            fi
          fi

          echo "‚úÖ All bundles within size limits"

  report-status:
    name: Report Overall Status
    runs-on: ubuntu-latest
    needs:
      [
        module-boundaries,
        token-pipeline,
        storybook-composition,
        security-scan,
        performance-budget,
      ]
    if: always()

    steps:
      - name: Report Success
        if: needs.module-boundaries.result == 'success' && needs.token-pipeline.result == 'success' && needs.storybook-composition.result == 'success' && needs.security-scan.result == 'success' && needs.performance-budget.result == 'success'
        run: |
          echo "‚úÖ ALL COLLISION PREVENTION & QUALITY GATES: PASSED"
          echo ""
          echo "üõ°Ô∏è  Module boundary enforcement: ‚úÖ PASSED"
          echo "üîß Token pipeline validation: ‚úÖ PASSED"
          echo "üìö Storybook composition: ‚úÖ PASSED"
          echo "üîí Security & dependency audit: ‚úÖ PASSED"
          echo "‚ö° Performance budget validation: ‚úÖ PASSED"
          echo ""
          echo "üéâ Ready for deployment!"

      - name: Report Failure
        if: needs.module-boundaries.result == 'failure' || needs.token-pipeline.result == 'failure' || needs.storybook-composition.result == 'failure' || needs.security-scan.result == 'failure' || needs.performance-budget.result == 'failure'
        run: |
          echo "‚ùå COLLISION PREVENTION & QUALITY GATES: FAILED"
          echo ""
          echo "üõ°Ô∏è  Module boundary enforcement: ${{ needs.module-boundaries.result }}"
          echo "üîß Token pipeline validation: ${{ needs.token-pipeline.result }}"
          echo "üìö Storybook composition: ${{ needs.storybook-composition.result }}"
          echo "üîí Security & dependency audit: ${{ needs.security-scan.result }}"
          echo "‚ö° Performance budget validation: ${{ needs.performance-budget.result }}"
          echo ""
          echo "Please check the logs above for specific violations"
          exit 1
