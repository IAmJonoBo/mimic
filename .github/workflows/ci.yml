name: Module Boundary Enforcement

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  module-boundaries:
    name: Enforce Module Boundaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: tmp/nx-cache
          key: ${{ runner.os }}-nx-${{ hashFiles('pnpm-lock.yaml', 'nx.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Export Nx Cloud token
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NX_TOKEN="$(gh variable get NX_CLOUD_ACCESS_TOKEN -R \"$GITHUB_REPOSITORY\" --json value --jq '.value' 2>/dev/null || true)"
          if [ -n "$NX_TOKEN" ]; then
            echo "NX_CLOUD_ACCESS_TOKEN=$NX_TOKEN" >> "$GITHUB_ENV"
          fi

      - name: Cleanup Apple metadata (pre-install)
        run: node tools/apple-cleaner.js --mode=full

      - name: Fail if Apple metadata files are tracked
        run: node tools/apple-cleaner.js --mode=check

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.2

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22.20.0
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start Nx self-healing run
        run: |
          pnpm exec nx start-ci-run --no-distribution --fix-tasks="*lint*,*format*" \
            || echo "Nx self-healing bootstrap skipped (token missing or feature disabled)"

      - name: Run ESLint module boundary checks
        run: pnpm nx run-many -t lint --parallel --maxParallel=4

      - name: Validate token namespace compliance
        run: |
          echo "üîç Checking CSS token namespace compliance..."
          # Ensure all CSS tokens use --ds-* prefix
          if grep -r "^[[:space:]]*--[^d][^s]-" packages/design-tokens/libs/tokens/css/ 2>/dev/null; then
            echo "‚ùå Found CSS tokens without ds- prefix"
            exit 1
          fi
          echo "‚úÖ All CSS tokens use --ds-* prefix"

          echo "üîç Checking JavaScript token namespace compliance..."
          # Ensure all JS tokens use ds prefix (exclude comments and strings)
          if grep -r "^[[:space:]]*export.*[^d][^s][A-Z]" packages/design-tokens/libs/tokens/js/ 2>/dev/null; then
            echo "‚ùå Found JS tokens without ds prefix"
            exit 1
          fi
          echo "‚úÖ All JS tokens use ds prefix"

      - name: Validate import path compliance
        run: |
          echo "üîç Checking for deprecated dist/ import paths..."
          # Ensure no imports use deprecated dist/ paths
          if grep -r "from.*design-tokens.*dist/" apps/ packages/ 2>/dev/null; then
            echo "‚ùå Found deprecated dist/ import paths"
            echo "Please update to use libs/tokens/ paths instead"
            exit 1
          fi
          if grep -r "import.*design-tokens.*dist/" apps/ packages/ 2>/dev/null; then
            echo "‚ùå Found deprecated dist/ import paths"
            echo "Please update to use libs/tokens/ paths instead"
            exit 1
          fi
          echo "‚úÖ No deprecated dist/ import paths found"

      - name: Check collision-safe token outputs
        run: |
          echo "üîç Verifying collision-safe token outputs exist..."

          # Check platform-rooted directories exist
          for platform in css scss js ts json dart compose react-native; do
            if [ ! -d "packages/design-tokens/libs/tokens/$platform" ]; then
              echo "‚ùå Missing platform directory: libs/tokens/$platform"
              exit 1
            fi
          done
          echo "‚úÖ All platform-rooted directories exist"

          # Verify ds- prefixed outputs
          if [ -f "packages/design-tokens/libs/tokens/css/tokens.css" ]; then
            if ! grep -q "^--ds-" packages/design-tokens/libs/tokens/css/tokens.css; then
              echo "‚ùå CSS tokens don't use --ds- prefix"
              exit 1
            fi
          fi
          echo "‚úÖ Token outputs are collision-safe"

      - name: Apply Nx self-healing fixes
        if: always()
        run: |
          pnpm exec nx fix-ci \
            || echo "Nx self-healing fixes not applied (token missing or no fixes available)"

  report-status:
    name: Report Module Boundary Status
    runs-on: ubuntu-latest
    needs: module-boundaries
    if: always()
    steps:
      - name: Report Success
        if: needs.module-boundaries.result == 'success'
        run: |
          echo "‚úÖ Module boundary enforcement: PASSED"
          echo "- ESLint module boundary rules enforced"
          echo "- Token namespace compliance verified"
          echo "- Import path compliance validated"
          echo "- Collision-safe outputs confirmed"

      - name: Report Failure
        if: needs.module-boundaries.result == 'failure'
        run: |
          echo "‚ùå Module boundary enforcement: FAILED"
          exit 1
